328. Odd Even Linked List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        /*ListNode* temp=head;
        ListNode* odd_dummy=new ListNode(0);
        ListNode* odd_tail=odd_dummy;
        ListNode* eve_dummy=new ListNode(0);
        ListNode* eve_tail=eve_dummy;
        int c=1;
        while(temp != NULL)
        {
            if(c % 2 != 0)
            {
                odd_tail->next=temp;
                odd_tail=odd_tail->next;
            }
            else
            {
                eve_tail->next=temp;
                eve_tail=eve_tail->next;
            }
            c++;
            temp=temp->next;
        }
        odd_tail->next=eve_dummy->next;
        eve_tail->next=NULL;
        return odd_dummy->next;
    */
    if(head == NULL)
    return NULL;

    ListNode* odd=head;
    ListNode* even=head->next;
    ListNode* evenhead=even;
    while(even != NULL && even->next != NULL)
    {
        odd->next=even->next;
        odd=odd->next;
        even->next=odd->next;
        even=even->next;
    }
    odd->next=evenhead;
    return head;
    }
};